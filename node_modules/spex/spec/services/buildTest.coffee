###
    # build test
    x = 0
    @testCode = ''
    buildTest = (scenario, done) =>
      leadspace = ""; nextSpace = ""
      if isCoffee
        leadspace = (scenario.code.match /^\n*(\s*)|[a-zA-Z]\n/)[1]
        if nextCode = @scenarios[x+1]?['code']
          nextSpace = (nextCode.match /^\n*(\s*)|[a-zA-Z]\n/)[1]
        else
          nextSpace = leadspace
      @testCode += "#{ leadspace }Error.prototype.scenario = #{ x }\n"
      @testCode += scenario.code
      @testCode += "#{ nextSpace }spex.spec.pass #{ x }\n" #@scenarios[#{ x }].status = 'pass'\n"
      x++
      done?()
    # change to reduce
    spex.async.forEachSeries @scenarios, buildTest, (err) -> if err? then log.error "buildtest - #{ err }"
visfrnryf softhekijdrhwwrez
###

coffee = require 'coffee-script'
#spec.odels = require "../spec.controller".models

console.log spec


buildTest = (scenarios, isCoffee) ->

  testCode = scenarios.reduce (scenario, nextScenario) =>
    wrap scenario, nextScenario

  if isCoffee then testCode = compileAndClean testCode

  wrap = (scenario, nextScenario) ->
    doSpaces = (code, nextCode) ->
      spaceMatcher = /^\n*(\s*)|[a-zA-Z]\n/
      match = (code) => code.match @spaceMatcher[1]
      leadSpace = match code
      if nextCode?
        nextSpace = match nextCode
      else
        nextSpace = leadSpace
      return { lead: leadSpace , next: nextSpace }

    if isCoffee
      spaces = doSpaces scenario.code, nextScenario?[code]
    else
      spaces = ''

    id = scenario.id
    return "#{ spaces.lead }Error.prototype.scenario = #{ id }\n" + scenario.code + "#{ spaces.next }spex.spec.pass #{ id }\n"

  compileAndClean = (testCode) ->
    code = coffee.compile testCode
    code = stripCoffeeWrapper = (code) -> code.split '\n'; code.pop();code.pop();code.shift(); code = code.join '\n'


module.exports = buildTest

## TEST

#>> Given a scenario, status, and whether it's coffee

firstScenario = spec.models.newScenario 0, ">> Given a scenario, status, and whether it's coffee",
      '''
          scenario =
            id : 0
            annotation : ">> Given a scenario, status, and whether its coffee"
            code : " foo = "foo" "
       '''

###
secondScenario =
id : 1
annotation : ">> When I build a test"
code : '''
          builder = new TestBuilder scenario, true
          spex.dump builder
       '''
thirdScenario =
id : 2
annotation : ">> Then I expect the test code to be correct"
code : '''
          boo = "you"
       '''
#>> When I build a test

builder = new TestBuilder scenario, true
spex.dump builder

#>> Then I expect the test code to be correct

builder.testCode is '''  foo = "foo"
                        builder = new TestBuilder scenario, true
                        spex.dump builder
                        boo = "you"
                   '''

