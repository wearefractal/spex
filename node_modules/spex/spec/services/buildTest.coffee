###
    # build test
    x = 0
    @testCode = ''
    buildTest = (scenario, done) =>
      leadspace = ""; nextSpace = ""
      if isCoffee
        leadspace = (scenario.code.match /^\n*(\s*)|[a-zA-Z]\n/)[1]
        if nextCode = @scenarios[x+1]?['code']
          nextSpace = (nextCode.match /^\n*(\s*)|[a-zA-Z]\n/)[1]
        else
          nextSpace = leadspace
      @testCode += "#{ leadspace }Error.prototype.scenario = #{ x }\n"
      @testCode += scenario.code
      @testCode += "#{ nextSpace }spex.spec.pass #{ x }\n" #@scenarios[#{ x }].status = 'pass'\n"
      x++
      done?()
    # change to reduce
    spex.async.forEachSeries @scenarios, buildTest, (err) -> if err? then log.error "buildtest - #{ err }"
visfrnryf softhekijdrhwwrez
###

coffee = require 'coffee-script'
async = require 'async'

buildTest = (scenarios, @isCoffee) ->
  processTest = (scenario, done) =>
    nextCode = scenarios[ scenario.id + 1 ]?['code']
    spacing = processWhitespace scenario, nextCode
    @testCode += wrap spacing, scenario.id, scenario.code
    done?()
  async.forEachSeries scenarios, processTest, (err) -> if err? then log.error "buildtest - #{ err }"
  return @testCode

module.exports = buildTest

##

wrap = (spacing, counter, code) ->
  result = "#{ spacing.lead }Error.prototype.scenario = #{ counter }\n #{code}\n#{ spacing.next }spex.spec.pass #{ counter }\n"



## TEST

should = require 'should'
Scenario = require('spex').load 'spec.models.Scenario'

#>> Given some Scenarios

scenarios = []
scenarios.push new Scenario 0, 'fooooo', 'foo = "fo222o"'
scenarios.push new Scenario 1, 'fooooosdsdsd', 'foo = "fdddoo"'
scenarios.push new Scenario 2, 'foooooddd', 'foo = "fdddoo"'

#>> When I run buildTest

test = buildTest scenarios, true
console.log test

