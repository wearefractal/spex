log = require 'node-log'; log.setName 'parsimony'
util = require 'util'; dump = (obj) -> log.info util.inspect(obj)
should = require 'should'
async = require 'async'

# Parsimony supports one style of parsing: annotated code blocks

Parsimony =

  parsingDelim: />>(.+)\n/

  # parse out annotated code blocks
  parse: (dsl, delim) ->
    if delim? then @parsingDelim = delim
    # strip leading whitespace and \n's
    dsl.replace /^\n\s+/, ''
    # split out features by the parsing token by default '>>'
    tokens = dsl.split @parsingDelim
    tokens.shift()
    tokens = tokens.map (token) -> token.match( /^\n*\s*(.+)\n*\s*$/ )?[1]
    blocks = []
    blocks.push {annotation: item, code: tokens[index + 1]} for item, index in tokens when (index % 2) is 0
    return blocks
    # TODO: support sync
    # async.forEachSeries feature, parseFeature, (err) -> if err? then log.error "parseFeature - #{ err }"

module.exports = Parsimony

### TEST

#>> Given some DSL code

code = '''

       >> Given some dsl code
         foo = "foo"
       '''

#>> When Parsimony parses it

blocks = Parsimony.parse code

#>> Then blocks should have 1 element

blocks.length.should.equal 1

#>> and the first element should be 'foo'

node = blocks.shift()
node.annotation.should.equal "Given some dsl code"
node.code.should.equal 'foo = "foo"'


#>> Given more complex dsl code

code = '''
       >> Given some dsl code
          foo = "foo"
       >> When I want to add another string
          foo+=" bar"
       >> Then I should see the strings appended
          foo ==="foo bar"
       '''

#>> When Parsimony parses it

blocks = Parsimony.parse code

#>> Then blocks should have 1 element

blocks.length.should.equal 3

#>> and the first element should be 'foo'

node = blocks.shift()
node.annotation.should.equal "Given some dsl code"
node.code.should.equal 'foo = "foo"'
node = blocks.shift()
node.annotation.should.equal "When I want to add another string"
node.code.should.equal 'foo+=" bar"'
node = blocks.shift()
node.annotation.should.equal "Then I should see the strings appended"
node.code.should.equal 'foo ==="foo bar"'

#

